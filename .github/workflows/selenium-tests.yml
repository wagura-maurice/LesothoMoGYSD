name: Selenium UI Tests

on:
  push:
    branches: [ "master" ]
    paths:
      - 'MoGYSD.Selenium/**'
      - '.github/workflows/selenium-tests.yml'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'MoGYSD.Selenium/**'
      - '.github/workflows/selenium-tests.yml'

env:
  DOTNET_VERSION: '9.0.x'
  CHROME_VERSION: 'latest'

jobs:
  test:
    name: Run Selenium Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
      
    - name: Install Chrome and ChromeDriver
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # Install Chrome for Testing (CfT)
        echo "Installing Chrome for Testing..."
        CHROME_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | jq -r '.channels.Stable.version')
        echo "Latest stable Chrome for Testing version: $CHROME_VERSION"
        
        # Download and install Chrome
        wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION/linux64/chrome-linux64.zip"
        unzip -q chrome-linux64.zip
        sudo mv chrome-linux64 /opt/chrome
        sudo ln -s /opt/chrome/chrome /usr/local/bin/chrome
        
        # Download and install ChromeDriver
        echo "Installing ChromeDriver $CHROME_VERSION..."
        wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
        unzip -q chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Verify installations
        echo "Chrome version: $(/opt/chrome/chrome --version)"
        echo "ChromeDriver version: $(chromedriver --version)"
        
    - name: Create appsettings.json
      run: |
        mkdir -p MoGYSD.Selenium
        cat > MoGYSD.Selenium/appsettings.json << 'EOF'
        {
          "AppSettings": {
            "BaseUrl": "${{ secrets.APP_BASE_URL }}",
            "AdminSystem": "${{ secrets.ADMIN_SYSTEM || 'MISSA' }}",
            "AdminUsername": "${{ secrets.ADMIN_USERNAME }}",
            "AdminPassword": "${{ secrets.ADMIN_PASSWORD }}",
            "AdminCaptcha": "${{ secrets.ADMIN_CAPTCHA || '7544' }}",
            "Headless": "true"
          }
        }
        EOF

    - name: Install dependencies
      working-directory: MoGYSD.Selenium
      run: |
        dotnet restore --no-cache
        dotnet build --no-restore --configuration Release

    # Chrome and ChromeDriver are now installed in the previous step
      
    - name: Install core utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y coreutils procps
        
    - name: Install additional dependencies
      run: |
        sudo apt-get update
        # Install individual packages with fallback for Ubuntu 24.04
        sudo apt-get install -y xvfb libxss1 libnss3 libgbm1 libgtk-3-0
        # Try to install libasound2 or fallback to libasound2t64
        sudo apt-get install -y libasound2 || sudo apt-get install -y libasound2t64 || true
        # Install other common dependencies
        sudo apt-get install -y libx11-xcb1 libxcomposite1 libxdamage1 libxext6 \
                               libxfixes3 libxrandr2 libxrender1 libxtst6 \
                               libatk-bridge2.0-0 libatk1.0-0 libcups2 \
                               libdrm2 libxkbcommon0 libxshmfence1 \
                               libxcb-dri3-0 libxcb1 libxcb-randr0 \
                               libxcb-xfixes0 libxcb-xinerama0 libxcb-xtest0 \
                               libxcb-shm0 libxcb-dri2-0
        
    - name: Run tests with xvfb
      working-directory: MoGYSD.Selenium
      env:
        DISPLAY: :99
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/chrome:/usr/local/bin
        # Set environment variables for test execution
        APPSETTINGS_BASEURL: ${{ secrets.APP_BASE_URL }}
        APPSETTINGS_ADMINSYSTEM: ${{ secrets.ADMIN_SYSTEM || 'MISSA' }}
        APPSETTINGS_ADMINUSERNAME: ${{ secrets.ADMIN_USERNAME }}
        APPSETTINGS_ADMINPASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        APPSETTINGS_ADMINCAPTCHA: ${{ secrets.ADMIN_CAPTCHA || '7544' }}
        APPSETTINGS_HEADLESS: "true"
        CHROME_PATH: /opt/chrome/chrome
        CHROMEWEBDRIVER: /usr/local/bin
      run: |
        echo "=== Environment ==="
        echo "PATH: $PATH"
        echo "CHROME_PATH: $CHROME_PATH"
        echo "CHROMEWEBDRIVER: $CHROMEWEBDRIVER"
        
        # Start Xvfb
        Xvfb :99 -screen 0 1920x1080x24 &
        
        echo "=== System Dependencies ==="
        ldd --version
        dpkg -l | grep -E 'libxss1|libnss3|libasound2|libgbm1|libgtk-3-0'
        
        echo "=== Chrome Version ==="
        if [ -f "$CHROME_PATH" ]; then
          $CHROME_PATH --version
          ls -la $CHROME_PATH
          ldd $CHROME_PATH || true
        else
          echo "Chrome not found at $CHROME_PATH"
        fi
        
        echo "=== ChromeDriver Version ==="
        if command -v chromedriver &> /dev/null; then
          chromedriver --version
          which chromedriver
          ldd $(which chromedriver) || true
        else
          echo "ChromeDriver not found in PATH"
        fi
        
        echo "=== Running Tests ==="
        set -x  # Enable debug output
        export DOTNET_CLI_TELEMETRY_OPTOUT=1
        export DOTNET_NOLOGO=true
        
        # Run tests with detailed logging
        dotnet test --no-build \
          --configuration Release \
          --logger "console;verbosity=detailed" \
          --blame-hang \
          --blame-hang-timeout 5m \
          --diag test_logs.txt \
          -- RunConfiguration.DotNetTestManagerDebug=true \
             RunConfiguration.DebugType=portable \
             RunConfiguration.TargetPlatform=x64 \
             RunConfiguration.TargetArchitecture=x64
        
        # Print test logs if tests fail
        if [ $? -ne 0 ]; then
          echo "=== Test Execution Failed ==="
          echo "=== Test Logs ==="
          cat test_logs.txt || true
          
          # Try to get process list
          echo "=== Running Processes ==="
          ps aux || true
          
          # Check for Chrome processes
          echo "=== Chrome Processes ==="
          pgrep -a chrome || true
        fi
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: MoGYSD.Selenium/TestResults/**/*
        retention-days: 7