@page "/grade/view/{Id:int}"
@using MoGYSD.Business.Models.Missa.Setups
@using MoGYSD.ViewModels.Missa.Setups 

@if (_isLoading)
{
    <div class="d-flex justify-center pa-10">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (Model != null)
{
    <MudGrid Class="mb-3" AlignItems="Align.Center" Justify="Justify.SpaceBetween">
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h4" Class="font-weight-bold">@HeaderText</MudText>
        </MudItem>
        <MudItem xs="12" md="4" Class="d-flex justify-start justify-md-end">
            <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4 pa-md-6 mb-6" Elevation="3">
        <MudCard Elevation="0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Class="font-weight-bold"><b>Class/ Grade Details</b></MudText>
                </CardHeaderContent>             
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="6" md="6">
                        <MudText><b>Class/ Grade:</b> @Model.Code</MudText>
                    </MudItem>                 
                    <MudItem xs="12" sm="6" md="6">
                        <div class="d-flex align-center">
                            <MudText Class="me-2"><b>Status:</b></MudText>
                            @if (Model.IsActive)
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Variant="Variant.Text">Active</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Variant="Variant.Text">Inactive</MudChip>
                            }
                        </div>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudPaper>

    <MudPaper Class="pa-4 mt-6" Elevation="0">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   OnClick="BackToList"
                   StartIcon="@Icons.Material.Filled.ArrowBack">
            Back
        </MudButton>
    </MudPaper>
}
else
{
    <MudAlert Severity="Severity.Error" Class="mt-4">The requested Grade could not be found.</MudAlert>
    <MudButton Variant="Variant.Filled"
               Color="Color.Secondary"
               OnClick="BackToList"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               Class="mt-4">
        Back
    </MudButton>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private GradeViewModel Model { get; set; }
    private bool _isLoading = true;
    private string HeaderText = "Class/ Grade Details";
    private List<BreadcrumbItem> _breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;

        var entity = await _context.Set<Grade>()
            .Include(g => g.Facilities)
            .AsNoTracking()
            .FirstOrDefaultAsync(g => g.Id == Id);

        if (entity == null)
        {
            _isLoading = false;
            return;
        }

        Model = _mapper.Map<GradeViewModel>(entity);

        HeaderText = $"Details for Class/ Grade '{Model.Code}'";
        UpdateBreadcrumbs();

        _isLoading = false;
    }

    private void UpdateBreadcrumbs()
    {
        _breadcrumbItems =
        [
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Settings", href: "/settings", icon: Icons.Material.Filled.Settings),
            new("Grades", href: "/grade"),
            new(HeaderText, href: null, disabled: true)
        ];
    }

    private void EditGrade()
    {
        Navigation.NavigateTo($"/grade/edit/{Id}");
    }

    private void BackToList() => Navigation.NavigateTo("/grade");
}
