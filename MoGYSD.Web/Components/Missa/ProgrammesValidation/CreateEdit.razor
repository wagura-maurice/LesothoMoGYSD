@page "/programcommunityvalidation/add"
@page "/programcommunityvalidation/edit/{Id:int}"

@using MoGYSD.Business.Models.Missa.Validation
@using MoGYSD.ViewModels.Missa.Programmes
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>@(Id.HasValue ? "Edit Validation List" : "Create Validation List")</PageTitle>

<MudGrid Class="mb-4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4" GutterBottom="false">@HeaderText</MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>

<MudPaper Elevation="2" Class="pa-4">
    <MudForm @ref="validationForm" Model="@Model" IsValid="@_isFormValid">
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="6">
                <MudDatePicker Variant="Variant.Outlined"  Label="Validation Start Date"
                               Date="Model.StartDate"
                               DateChanged="(newDate) => OnStartDateChanged(newDate)"
                               For="@(() => Model.StartDate)"
                               Required="true"
                               />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDatePicker Variant="Variant.Outlined"  Label="Validation End Date"                         
                               Date="Model.EndDate"
                               DateChanged="(newDate) => OnEndDateChanged(newDate)"
                               For="@(() => Model.EndDate)"
                               Required="true"
                              />
            </MudItem>
          

            <MudItem xs="12" sm="6" md="6">
                <DistrictAutocomplete Variant="Variant.Outlined" Label="District"
                                      For="@(() => Model.DistrictId)"
                                      @bind-Value="Model.DistrictId"
                                      Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6" md="6">
                <CommunityCouncilAutocomplete Variant="Variant.Outlined" Label="Community Council"
                                              DistrictId="@Model.DistrictId"
                                              For="@(() => Model.CommunityCouncilId)"
                                              @bind-Value="Model.CommunityCouncilId"
                                              Required="true" />
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-space-between mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           OnClick="BackToList"
                           Class="me-2">
                    Back
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="SaveHeader"
                           Class="me-2">
                    @if (_isWorking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing...</MudText>
                    }
                    else
                    {
                        <span>@(Model.Id > 0 ? "Update" : "Save")</span>
                    }

                </MudButton>

            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public int? Id { get; set; }

    private MudForm validationForm;
    private ValidationListViewModel Model { get; set; } = new();

    private bool _isWorking = false;
    private bool _isFormValid;
    private string HeaderText = "Programme Community Validation";
    private List<BreadcrumbItem> _breadcrumbItems;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue && Id.Value > 0)
        {
            HeaderText = "Edit Programme Community Validation";
            var validationList = await _context.ValidationLists.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);

            if (validationList != null)
            {
                Model = _mapper.Map<ValidationListViewModel>(validationList);
            }
            else
            {
                Snackbar.Add("Programme Community Validation not found.", Severity.Error);
                Navigation.NavigateTo("/programcommunityvalidation");
                return; 
            }
        }

        var pageTitle = Id.HasValue ? "Edit Programme Community Validation" : "Create Programme Community Validation";

        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Programme Community Validation", href: "/programcommunityvalidation", icon: Icons.Material.Filled.People),
            new BreadcrumbItem(pageTitle, href: null, disabled: true)
        };
    }

    private async Task SaveHeader()
    {
        await validationForm.Validate();
        if (!validationForm.IsValid)
        {
            Snackbar.Add("Please fix errors before proceeding.", Severity.Error);
            return;
        }

        _isWorking = true;
        StateHasChanged(); 

        try
        {
            if (Model.Id > 0)
            {
                var entity = await _context.ValidationLists.FindAsync(Model.Id);
                if (entity != null)
                {
                    _mapper.Map(Model, entity);
                    entity.ModifiedOn = DateTime.UtcNow;
                    _context.ValidationLists.Update(entity);
                    await _context.SaveChangesAsync();

                    Snackbar.Add("Programme Community Validation updated successfully.", Severity.Success);
                    Navigation.NavigateTo($"/programcommunityvalidation/view/{entity.Id}");
                }
            }
            else
            {
                var duplicateQuery = _context.ValidationLists
                    .Where(v =>                   
                        v.DistrictId == Model.DistrictId &&
                        v.CommunityCouncilId == Model.CommunityCouncilId &&
                        v.StartDate == Model.StartDate &&
                        v.EndDate == Model.EndDate
                    );

                if (await duplicateQuery.AnyAsync())
                {
                    Snackbar.Add("A validation plan with the same Programme, Location, and Dates already exists.", Severity.Error);
                    _isWorking = false;
                    return;
                }

                var entity = _mapper.Map<ValidationList>(Model);
                entity.CreatedOn = DateTime.UtcNow;
                _context.ValidationLists.Add(entity);
                await _context.SaveChangesAsync();

                await CreateInitialValidationDetails(entity.Id, entity.CommunityCouncilId);

                Snackbar.Add("Programme Community Validation created successfully.", Severity.Success);
                Navigation.NavigateTo($"/programcommunityvalidation/view/{entity.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("An error occurred while saving.", Severity.Error);
        }
        finally
        {
            _isWorking = false;
            StateHasChanged(); 
        }
    }

    private async Task CreateInitialValidationDetails(int validationListId, int communityCouncilId)
    {
        var pendingStatusId = await GetSystemCodeDetailId("ValidationStatus", "Pending");
        if (pendingStatusId == 0)
        {
            Snackbar.Add("Could not find 'Pending' status. Cannot create details.", Severity.Error);
            return;
        }

        var memberIds = await _context.HouseholdMembers
            .AsNoTracking()
            .Where(hm => hm.Household.Village.CommunityCouncilId == communityCouncilId)
            .Select(hm => hm.Id)
            .ToListAsync();

        if (!memberIds.Any()) return;

        var validationDetails = memberIds.Select(memberId => new ValidationDetail
        {
            ValidationListId = validationListId,
            HouseholdMemberId = memberId,
            ValidationStatusId = pendingStatusId
        }).ToList();

        await _context.ValidationDetails.AddRangeAsync(validationDetails);
        await _context.SaveChangesAsync();
    }

    private async Task<int> GetSystemCodeDetailId(string systemCodeType, string valueName)
    {
        var systemCodeDetail = await _context.SystemCodeDetails
            .AsNoTracking()
            .Include(scd => scd.SystemCode)
            .FirstOrDefaultAsync(scd => scd.SystemCode.Code == systemCodeType && scd.Code == valueName);

        return systemCodeDetail?.Id ?? 0;
    }


    private void OnStartDateChanged(DateTime? newDate)
    {
        Model.StartDate = newDate;
    }

    private void OnEndDateChanged(DateTime? newDate)
    {
        Model.EndDate = newDate;
    }

    private void BackToList() => Navigation.NavigateTo("/programcommunityvalidation");
}