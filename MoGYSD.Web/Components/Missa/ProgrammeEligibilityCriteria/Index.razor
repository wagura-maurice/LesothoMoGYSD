@page "/programme/eligibilitycriteria"
@using MoGYSD.Business.Models.Missa.ProgrammeConfiguration
@using MoGYSD.Business.Persistence
@using MoGYSD.Business.Views.Missa.EligibilityTests
@using MoGYSD.Business.Views.Missa.Programmes
@using MoGYSD.ViewModels.Missa.Eligibility

<MudGrid Class="mb-3" AlignItems="Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h2" Class="font-weight-bold"><b>Programme Eligibility Criteria </b></MudText>
        <MudText>
            Used to create a programme eligibility criteria
        </MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>

<MudExpansionPanels Elevation="0">
    <SearchPanel Filter="@filterModel" OnFilterApplied="@ReloadTable" />
</MudExpansionPanels>

<MudPaper Class="p-4 mt-4">  
    <MudGrid Justify="Justify.FlexEnd" Class="mb-2">
        <MudItem>
            @if (UserProfileService.UserProfile.Contains("PROGRAMME ELIGIBILITY CRITERIA:CREATE"))
            {
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                           OnClick="AddNewEligibilityCriteria"
                       DropShadow="true"
                       Color="Color.Primary">
                Add New Programme Eligibility Criteria
            </MudButton>
            }
        </MudItem>
    </MudGrid>

    <MudDataGrid @ref="table" ServerData="@(LoadEligibilityCriteria)" T="EligibilityCriteriaView"  Bordered="true" Striped="true" Hover="true" Dense="true" RowsPerPage="20">

        <ToolBarContent>
            <MudText><b>Total Programme Eligibility Criteria: @totalItems</b></MudText>            
        </ToolBarContent>

        <NoRecordsContent>
            <MudText Typo="Typo.subtitle1" Class="my-4 text-muted text-center"> 
                No Eligibility Criteria found. Try adjusting your filters.
            </MudText>
        </NoRecordsContent>

        <Columns>
            <PropertyColumn Property="x => x.AssistanceUnitName" Title="Assistance Unit"  />
            <PropertyColumn Property="x => x.ProgrammeName" Title="Programme"  />
            <PropertyColumn Property="x => x.VulnerabilityTypeNames" Title="Vulnerability Type"  />
            <PropertyColumn Property="x => x.PovertyStatusNames" Title="Poverty Status"  />
            <PropertyColumn Property="x => x.CommunityValidationStatusName" Title="Community Based Categorization"  />          
            <TemplateColumn Title="Active">
                <CellTemplate>
                    <MudText Style="@($"{GetStatusStyle(context.Item.IsActive)} display:block; padding:4px; border-radius:6px; width:100%; text-align: center;")">
                        @(context.Item.IsActive ? "Yes" : "No")
                    </MudText>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Actions" StickyRight="true">
                <CellTemplate>
                      <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        @if (UserProfileService.UserProfile.Contains("PROGRAMME ELIGIBILITY CRITERIA:VIEW") && context.Item.IsActive)
                    {
                  
                        <MudMenuItem OnClick="@(() => ViewEligibilityCriteria(context.Item.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-2 text-primary" /> Details
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => EditEligibilityCriteria(context.Item.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" /> Edit
                        </MudMenuItem>
                        }
                        @if (UserProfileService.UserProfile.Contains("PROGRAMME ELIGIBILITY CRITERIA:MODIFY") )
                        {

                            @if (context.Item.IsActive)
                            {

                                <MudMenuItem OnClick="@(() => ToggleActivation(context.Item.Id, context.Item.ProgrammeName, false))">
                                    <MudIcon Icon="@Icons.Material.Filled.ToggleOff" Color="Color.Error" Class="me-2" /> Deactivate
                                </MudMenuItem>
                            }
                            else
                            {
                                <MudMenuItem OnClick="@(() => ViewEligibilityCriteria(context.Item.Id))">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-2 text-primary" /> Details
                                </MudMenuItem>
                                <MudMenuItem OnClick="@(() => ToggleActivation(context.Item.Id, context.Item.ProgrammeName, true))">
                                    <MudIcon Icon="@Icons.Material.Filled.ToggleOn" Color="Color.Success" Class="me-2" /> Activate
                                </MudMenuItem>
                            }
                        }
                    </MudMenu>
                    
                   
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="EligibilityCriteriaView" PageSizes="@(new int[] { 5, 10, 20, 50 })" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private MudDataGrid<EligibilityCriteriaView> table = default!;
    private EligibilitySetupCriteria filterModel = new();
    private bool isLoading = false;
    private List<BreadcrumbItem> _breadcrumbItems =
     [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Settings", href: "/", icon: Icons.Material.Filled.Settings),
        new("Programme Eligibility Criteria", href: null, disabled: true)
     ];
    private int totalItems;

    private async Task<GridData<EligibilityCriteriaView>> LoadEligibilityCriteria(GridState<EligibilityCriteriaView> state)
    {
        isLoading = true;
        try
        {
            if (_context == null)
            {
                Snackbar.Add("Database context is not available.", Severity.Error);
                return new GridData<EligibilityCriteriaView> { Items = Enumerable.Empty<EligibilityCriteriaView>(), TotalItems = 0 };
            }

            IQueryable<EligibilityCriteriaView> query = _context.EligibilityCriteriaView.AsNoTracking();
            if (!string.IsNullOrWhiteSpace(filterModel.Name))
                query = query.Where(x => x.ProgrammeName.Contains(filterModel.Name) || x.VulnerabilityTypeNames.Contains(filterModel.Name)
                || x.LocationNames.Contains(filterModel.Name) || x.PovertyStatusNames.Contains(filterModel.Name) || x.LocationNames.Contains(filterModel.Name));
            if (filterModel.ProgrammeId.HasValue)
                query = query.Where(x => x.ProgrammeId == filterModel.ProgrammeId);   
            if (filterModel.AssistanceUnitId.HasValue)
                query = query.Where(x => x.AssistanceUnitId == filterModel.AssistanceUnitId);        
         
         
            bool sortApplied = false;
            if (state.SortDefinitions.Any())
            {
                var sortDefinition = state.SortDefinitions.First();
                if (!string.IsNullOrEmpty(sortDefinition.SortBy))
                {

                    if (!sortApplied)
                    {
                    }
                }
            }

            if (!sortApplied)
            {
                query = query.OrderByDescending(p => p.Id);
            }
            totalItems = await query.CountAsync();

            var items = await query
                .Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToListAsync();
          
            return new GridData<EligibilityCriteriaView>
            {
                Items = items,
                TotalItems = totalItems
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add($"Error loading Eligibility Criteria: {ex.Message}", Severity.Error);
            return new GridData<EligibilityCriteriaView> { Items = Enumerable.Empty<EligibilityCriteriaView>(), TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ReloadTable()
    {
        if (table != null)
        {
            await table.ReloadServerData();
        }
    }

    private void ViewEligibilityCriteria(int id)
    {
        Navigation.NavigateTo($"/programme/eligibilitycriteria/view/{id}");
    }

    private void EditEligibilityCriteria(int id)
    {
        Navigation.NavigateTo($"/programme/eligibilitycriteria/edit/{id}");
    }

    private async Task AddNewEligibilityCriteria()
    {
        Navigation.NavigateTo("/programme/eligibilitycriteria/add");
        await Task.CompletedTask;
    }
    private string GetStatusStyle(bool isActive)
    {
        return isActive
            ? "background-color:#e6f4ea; color:#2e7d32; border: 1px solid #c8e6c9;"
            : "background-color:#fcebea; color:#c62828; border: 1px solid #f5c6cb;";
    }
    private string GetValidationStatusStyle(string statusName)
    {
       
        return string.Equals(statusName, "Yes", StringComparison.OrdinalIgnoreCase)
            ? "background-color:#e6f4ea; color:#2e7d32; border: 1px solid #c8e6c9;" 
            : "background-color:#fcebea; color:#c62828; border: 1px solid #f5c6cb;";
    }
    private async Task ToggleActivation(int programmeId, string programmeName, bool activate)
    {
        string action = activate ? "Activate" : "Deactivate";
        var parameters = new DialogParameters
    {
        { "ContentText", $"Are you sure you want to {action.ToLower()} the Programme Eligibility Criteria '{programmeName}'?" }
    };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDialog>($"{action} Programme Eligibility Criteria", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await PerformToggleAsync(programmeId, action);
        }
    }


    private async Task PerformToggleAsync(int programmeId, string action)
    {
        var programme = await _context.Set<EligibilityCriteria>()
                                      .FirstOrDefaultAsync(p => p.Id == programmeId);

        if (programme == null)
        {
            Snackbar.Add("Programme eligibility criteria not found.", Severity.Error);
            return;
        }

        try
        {
            programme.IsActive = !programme.IsActive;
            programme.ModifiedOn = DateTime.UtcNow;

            _genericService.Update(programme);
            await _context.SaveChangesAsync();
            Snackbar.Add($"Programme Eligibility Criteria '{programme.Programme}' has been {action.ToLower()}d.", Severity.Success);

            await table.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating programme eligibility criteria: {ex.Message}", Severity.Error);
        }
    }
}