@using MoGYSD.Business.Models.Missa.ProgrammeConfiguration
@using MoGYSD.Business.Persistence
@using MoGYSD.Business.Views.Missa.Programmes
@using MoGYSD.Web.Components.Autocompletes
@using MoGYSD.ViewModels.Missa.Programmes

<MudExpansionPanel Text="Expand to apply search filter" IsInitiallyExpanded="true">
    <PanelContent>
        <MudGrid Class="mt-2">

            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="Filter.Code"
                              Label="Programme Code"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Clearable="true"
                              Dense="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="Filter.Name"
                              Label="Programme Name"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Clearable="true"
                              Dense="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <SystemCodeAutocomplete Variant="Variant.Outlined" Label="Assitance Unit"
                                        For="@(() => Filter.AssistanceUnitId)"
                                        @bind-Value="Filter.AssistanceUnitId"
                                        ParentCode="AssistanceUnit">
                </SystemCodeAutocomplete>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <SystemCodeAutocomplete Variant="Variant.Outlined" Label="Benefit Type"
                                        For="@(() => Filter.ProgramTypeId)"
                                        @bind-Value="Filter.ProgramTypeId"
                                        ParentCode="ProgramType">
                </SystemCodeAutocomplete>
            </MudItem>
           
            <MudItem xs="12" sm="6" md="4">
               <MudSelect  Variant="Variant.Outlined" T="int?" @bind-Value="Filter.PaymentFrequencyId"
                           Label="Delivery Frequency"
                           Margin="Margin.Dense"
                           Dense="true"
                           Clearable="true">
                    @foreach (var item in PaymentFrequencyOptions)
                    {
                       <MudSelectItem T="int?" Value="item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>           
          
            <MudItem xs="12" sm="6" md="4">
               <MudSelect  Variant="Variant.Outlined" T="bool?" @bind-Value="Filter.IsActive"
                           Label="Status"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           Dense="true">
                   <MudSelectItem T="bool?" Value="@((bool?)null)">All</MudSelectItem>
                   <MudSelectItem T="bool?" Value="true">Active</MudSelectItem>
                   <MudSelectItem T="bool?" Value="false">Inactive</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" class="d-flex justify-end mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="ApplyFilterClicked"
                           Class="me-2">
                     Filter
                </MudButton>

                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="ClearFilterClicked">
                    Clear
                </MudButton>
            </MudItem>
        </MudGrid>
    </PanelContent>
</MudExpansionPanel>

@code {
    [Parameter] public ProgrammeSearchFilter Filter { get; set; } = new();
    [Parameter] public EventCallback OnFilterApplied { get; set; }
    private List<LookupItemViewModel> PaymentFrequencyOptions = new();
    protected override async Task OnInitializedAsync()
    {
        PaymentFrequencyOptions = await FetchPaymentFrequenciesLookupValuesAsync();        
    }


    private async Task<List<LookupItemViewModel>> FetchPaymentFrequenciesLookupValuesAsync()
    {
        LoadingService.Show();
        try
        {
            return await _context.Set<PaymentFrequencyView>()
                .Where(pf => pf.IsActive)
                .OrderBy(pf => pf.Id)
                .Select(pf => new LookupItemViewModel
                {
                    Id = pf.Id,
                    Name = pf.Name
                })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching lookups for payment frequencies: {ex.Message}", Severity.Warning);
            return new List<LookupItemViewModel>();
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task ApplyFilterClicked()
    {
        await OnFilterApplied.InvokeAsync();
    }

    private async Task ClearFilterClicked()
    {
        Filter.Code = null;
        Filter.Name = null;
        Filter.AssistanceUnitId = null;
        Filter.ProgramTypeId = null;
        Filter.PaymentFrequencyId = null;
        Filter.ProxiesAllowed = null;
        Filter.Amount = null;
        Filter.IsActive = null;
      
        StateHasChanged();
        
        await OnFilterApplied.InvokeAsync();
        await OnFilterApplied.InvokeAsync();
    }
}
