@page "/payment-frequencies"
@using MoGYSD.Business.Views.Missa.Programmes
@using Microsoft.EntityFrameworkCore
@using MoGYSD.Business.Persistence
@inject ApplicationDbContext _context
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Payment Frequencies</PageTitle>

<MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3 mt-3">
    <MudItem xs="12" sm="6" Class="d-flex align-center">
        <MudText Typo="Typo.h5" Class="me-3">Payment Frequencies</MudText>
        <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm"
                      Placeholder="Search..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      OnKeyUp="@OnSearchKeyUp"
                      Class="search-input" />
    </MudItem>
    <MudItem xs="12" sm="6" Class="d-flex justify-sm-end align-center">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="AddNewPaymentFrequency"
                   StartIcon="@Icons.Material.Filled.Add">
            Add New Frequency
        </MudButton>
    </MudItem>
</MudGrid>

<MudPaper Class="p-0" Elevation="1">
    <MudDataGrid @ref="table"
                 T="PaymentFrequencyView"
                 ServerData="LoadData"
                 
                 Bordered="true"
                 Striped="true"
                 Dense="true"
                 Filterable="true"
                 Class="mud-table-outlined">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="#" Sortable="true" />
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="x => x.FrequencyName" Title="Frequency" Sortable="true" />
            <PropertyColumn Property="x => x.CreatedByUserName" Title="Created By" Sortable="true" />           
            <PropertyColumn Property="x => x.IsActive" Title="Active" />
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Dense="true">
                        <MudMenuItem OnClick="@(() => ViewDetails(context.Item.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-2 text-primary" /> View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => EditItem(context.Item.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" /> Edit
                        </MudMenuItem>
                    </MudMenu>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PaymentFrequencyView" PageSizes="@(new int[] { 5, 10, 20, 50 })" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private MudDataGrid<PaymentFrequencyView> table = default!;
    private string searchTerm = string.Empty;
    private bool isLoading = false;

    private async Task<GridData<PaymentFrequencyView>> LoadData(GridState<PaymentFrequencyView> state)
    {
        isLoading = true;

        try
        {
            var query = _context.PaymentFrequencyView.AsNoTracking();

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var term = searchTerm.Trim().ToLower();
                query = query.Where(x =>
                    x.Name.ToLower().Contains(term) ||
                    x.FrequencyName.ToLower().Contains(term) ||
                    x.CreatedByUserName.ToLower().Contains(term) ||
                    x.ModifiedByUserName.ToLower().Contains(term));
            }

            bool sortApplied = false;
            if (state.SortDefinitions.Any())
            {
                var sortDef = state.SortDefinitions.First();
                if (!string.IsNullOrWhiteSpace(sortDef.SortBy))
                {
                    query = sortDef.Descending
                        ? query.OrderByDescending(x => EF.Property<object>(x, sortDef.SortBy))
                        : query.OrderBy(x => EF.Property<object>(x, sortDef.SortBy));
                    sortApplied = true;
                }
            }

            if (!sortApplied)
            {
                query = query.OrderByDescending(x => x.Id);
            }

            var totalItems = await query.CountAsync();
            var items = await query
                .Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToListAsync();

            return new GridData<PaymentFrequencyView>
            {
                Items = items,
                TotalItems = totalItems
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
            return new GridData<PaymentFrequencyView> { Items = Enumerable.Empty<PaymentFrequencyView>(), TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ReloadTable()
    {
        if (table is not null)
            await table.ReloadServerData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ReloadTable();
        }
    }

    private void ViewDetails(int id) => Navigation.NavigateTo($"/payment-frequencies/details/{id}");

    private void EditItem(int id) => Navigation.NavigateTo($"/payment-frequencies/edit/{id}");

    private void AddNewPaymentFrequency() => Navigation.NavigateTo("/payment-frequencies/add");
}
