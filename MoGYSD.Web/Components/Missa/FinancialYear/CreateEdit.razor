@page "/financialyear/add"
@page "/financialyear/edit/{Id:int}"

@using MoGYSD.Business.Models.Missa.Setups
@using MoGYSD.ViewModels.Missa.Setups

<PageTitle>@(Id.HasValue ? "Edit Financial Year" : "Create Financial Year")</PageTitle>

<MudGrid Class="mb-4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4" GutterBottom="false">@HeaderText</MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>

<MudPaper Elevation="2" Class="pa-4">
    <MudForm @ref="financialYearForm" Model="@Model" IsValid="@_isFormValid">
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="Model.Name"
                              Label="Financial Year Name"
                              For="@(() => Model.Name)"
                              Variant="Variant.Outlined"
                              Required="true"
                              Counter="100" />
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudDatePicker Label="Start Date"
                               Variant="Variant.Outlined"
                               @bind-Date="Model.StartDate"
                               For="@(() => Model.StartDate)"
                               Required="true" />
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudDatePicker Label="End Date"
                               Variant="Variant.Outlined"
                               @bind-Date="Model.EndDate"
                               For="@(() => Model.EndDate)"
                               Required="true" />
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-space-between mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           OnClick="BackToList"
                           Class="me-2">
                    Back
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="SaveAsync"                       
                           Class="me-2">
                    @if (_isWorking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving..</MudText>
                    }
                    else
                    {
                        <span>@(Model.Id > 0 ? "Update Financial Year" : "Save Financial Year")</span>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public int? Id { get; set; }

    private MudForm financialYearForm;
    private FinancialYearViewModel _model = new();
    private FinancialYearViewModel Model
    {
        get => _model;
        set
        {
            _model = value;
            _model.Name = _model.Name?.ToUpper();
        }
    }
    private bool _isWorking = false;
    private bool _isFormValid;
    private string HeaderText = "Create Financial Year";
    private List<BreadcrumbItem> _breadcrumbItems;


    protected override async Task OnInitializedAsync()
    {
        bool isEditMode = Id.HasValue && Id.Value > 0;
        HeaderText = isEditMode ? "Edit Financial Year" : "Create Financial Year";

        if (isEditMode)
        {
            var entity = await _context.FinancialYears.FirstOrDefaultAsync(x => x.Id == Id);

            if (entity != null)
            {
                Model = _mapper.Map<FinancialYearViewModel>(entity);
            }
            else
            {
                Snackbar.Add("Financial Year not found.", Severity.Error);
                Navigation.NavigateTo("/financialyear");
                return;
            }
        }
        else
        {
            Model = new FinancialYearViewModel { IsActive = true };
        }

        SetupBreadcrumbs(HeaderText);
    }

    private void SetupBreadcrumbs(string pageTitle)
    {
        _breadcrumbItems =
        [
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Settings", href: "/financialyear", icon: Icons.Material.Filled.Settings),
            new("Financial Years", href: "/financialyear"),
            new(pageTitle, href: null, disabled: true)
        ];
    }

    private async Task SaveAsync()
    {
        await financialYearForm.Validate();
        if (!financialYearForm.IsValid)
        {
            Snackbar.Add("Please fix form errors before proceeding.", Severity.Error);
            return;
        }

        if (Model.EndDate <= Model.StartDate)
        {
            Snackbar.Add("End Date must be after Start Date.", Severity.Error);
            return;
        }

        _isWorking = true;

        try
        {
         if (Model.IsActive)
        {
            var existingActiveYear = await _context.FinancialYears
                .FirstOrDefaultAsync(fy => fy.IsActive && fy.Id != Model.Id);

            if (existingActiveYear != null)
            {
                Snackbar.Add(
                    $"Cannot set this financial year as active. '{existingActiveYear.Name}' is currently active. Please deactivate '{existingActiveYear.Name}' first.",
                    Severity.Error
                );

                _isWorking = false;
                return;
            }
        }


            bool hasDuplicate = await _context.FinancialYears.AnyAsync(fy =>
      (fy.Name.ToUpper() == Model.Name.ToUpper() ||
       fy.StartDate == Model.StartDate ||
       fy.EndDate == Model.EndDate) &&
      fy.Id != Model.Id);

            if (hasDuplicate)
            {
                if (await _context.FinancialYears.AnyAsync(fy => fy.Name.ToUpper() == Model.Name.ToUpper() && fy.Id != Model.Id))
                    Snackbar.Add("A financial year with this name already exists.", Severity.Error);
                else if (await _context.FinancialYears.AnyAsync(fy => fy.StartDate == Model.StartDate && fy.Id != Model.Id))
                    Snackbar.Add("A financial year with this Start Date already exists.", Severity.Error);
                else if (await _context.FinancialYears.AnyAsync(fy => fy.EndDate == Model.EndDate && fy.Id != Model.Id))
                    Snackbar.Add("A financial year with this End Date already exists.", Severity.Error);

                _isWorking = false;
                return;
            }

            Model.Name = Model.Name?.ToUpperInvariant();
            if (Model.Id > 0) 
            {
                var entity = await _context.FinancialYears.FindAsync(Model.Id);
                if (entity != null)
                {
                    _mapper.Map(Model, entity);
                    entity.ModifiedOn = DateTime.UtcNow;                   
                    _genericService.Update(entity, false);
                    Snackbar.Add("Financial Year updated successfully.", Severity.Success);
                    Navigation.NavigateTo("/financialyear");
                }
            }
            else // Create new
            {
            
              

                var entity = _mapper.Map<FinancialYear>(Model);               
                entity.CreatedOn = DateTime.UtcNow;
                _genericService.Add(entity, false);
               
                await _genericService.SaveAsync();
                Snackbar.Add("Financial Year created successfully.", Severity.Success);
                Navigation.NavigateTo("/financialyear");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("An error occurred while saving the financial year.", Severity.Error);
        }
        finally
        {
            _isWorking = false;
        }
    }

    private void BackToList() => Navigation.NavigateTo("/financialyear");
}