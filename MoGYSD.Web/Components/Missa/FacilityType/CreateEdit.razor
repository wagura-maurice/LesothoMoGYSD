@page "/facilitytype/add"
@page "/facilitytype/edit/{Id:int}"

@using System.Globalization
@using MoGYSD.Business.Models.Missa.Setups
@using MoGYSD.Business.ViewModels.Missa.Setups
@using MoGYSD.ViewModels.Missa.Setups

<PageTitle>@(Id.HasValue ? "Edit Facility Type" : "Create Facility Type")</PageTitle>

<MudGrid Class="mb-4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4" GutterBottom="false">@HeaderText</MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>

<MudPaper Elevation="2" Class="pa-4">
    <MudForm @ref="facilityTypeForm" Model="@Model" @bind-IsValid="@_isFormValid">
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="12">
                <MudTextField @bind-Value="Model.Name"
                              Label="Facility Type"
                              For="@(() => Model.Name)"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Facility type name is required."
                              Counter="100" />
            </MudItem>

          

            <MudItem xs="12" Class="d-flex justify-space-between mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           OnClick="BackToList"
                           Class="me-2">
                    Back
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="SaveAsync"                         
                           Class="me-2">
                    @if (_isWorking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving...</MudText>
                    }
                    else
                    {
                        <span>@(Model.Id > 0 ? "Update Facility Type" : "Save Facility Type")</span>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public int? Id { get; set; }

    private MudForm facilityTypeForm;
    private FacilityTypeViewModel Model = new();
  

    private bool _isWorking = false;
    private bool _isFormValid;
    private string HeaderText = "Create Facility Type";
    private List<BreadcrumbItem> _breadcrumbItems;

    protected override async Task OnInitializedAsync()
    {
        bool isEditMode = Id.HasValue && Id.Value > 0;
        HeaderText = isEditMode ? "Edit Facility Type" : "Create Facility Type";

        if (isEditMode)
        {
            var entity = await _context.Set<FacilityType>().FirstOrDefaultAsync(x => x.Id == Id.Value);

            if (entity != null)
            {
                Model = _mapper.Map<FacilityTypeViewModel>(entity);
            }
            else
            {
                Snackbar.Add("Facility Type not found.", Severity.Error);
                Navigation.NavigateTo("/facilitytype");
                return;
            }
        }
        else
        {
            Model = new FacilityTypeViewModel { IsActive = true };
        }

        SetupBreadcrumbs(HeaderText);
    }

    private void SetupBreadcrumbs(string pageTitle)
    {
        _breadcrumbItems =
        [
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Settings", href: "/facilitytype", icon: Icons.Material.Filled.Settings),
            new("Facility Types", href: "/facilitytype"),
            new(pageTitle, href: null, disabled: true)
        ];
    }

    private async Task SaveAsync()
    {
        await facilityTypeForm.Validate();
        if (!facilityTypeForm.IsValid)
        {
            Snackbar.Add("Please fix form errors before proceeding.", Severity.Error);
            return;
        }

        _isWorking = true;

        if (!string.IsNullOrWhiteSpace(Model.Name))
        {
            TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
            Model.Name = textInfo.ToTitleCase(Model.Name.ToLower());
        }
        try
        {
            bool isDuplicate = await _context.FacilityTypes
                                             .AnyAsync(fy => fy.Name.ToUpper() == Model.Name && fy.Id != Model.Id);
            if (isDuplicate)
            {
                Snackbar.Add("A school type with this name already exists.", Severity.Error);
                _isWorking = false;
                return;
            }

            if (Model.Id > 0)
            {
                var entity = await _context.Set<FacilityType>().FirstOrDefaultAsync(x => x.Id == Model.Id);
                if (entity != null)
                {
                    _mapper.Map(Model, entity);
                    entity.ModifiedOn = DateTime.UtcNow;
                    _genericService.Update(entity,false);
                    await _context.SaveChangesAsync();
                    Snackbar.Add("Facility Type updated successfully.", Severity.Success);
                    Navigation.NavigateTo("/facilitytype");
                }
            }
            else
            {
                var entity = _mapper.Map<FacilityType>(Model);
                entity.CreatedOn = DateTime.UtcNow;
                _genericService.Add(entity,false);
                await _context.SaveChangesAsync();
                Snackbar.Add("Facility Type created successfully.", Severity.Success);
                Navigation.NavigateTo("/facilitytype");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("An error occurred while saving the school type.", Severity.Error);
            return;
        }
        finally
        {
            _isWorking = false;
        }
    }
    private string ToSentenceCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        input = input.Trim();
        return char.ToUpperInvariant(input[0]) + input.Substring(1).ToLowerInvariant();
    }
    private void BackToList() => Navigation.NavigateTo("/facilitytype");
}