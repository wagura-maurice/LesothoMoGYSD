@page "/master/addmaster"
@page "/master/addmaster/{Id:int}"
@using System.ComponentModel.DataAnnotations
@using MoGYSD.Business.Models.Nissa.MasterRegistrations
@using MoGYSD.Business.Persistence
@using MoGYSD.Business.Views.Nissa.MasterRegistrations
@using MoGYSD.ViewModels.Nissa.MasterRegistrations
@using MoGYSD.ViewModels.Nissa.Nissa.MasterRegistrations
@using MoGYSD.Web.Components.Autocompletes
@using MudBlazor

<MudGrid Class="mb-3" AlignItems="Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h2" Class="font-weight-bold"><b>@HeaderText</b></MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>
<MudPaper Elevation="3">
    <MudTabs @bind-ActivePanelIndex="_activeTab" KeepPanelsAlive="true">

        <MudTabPanel Text="National Master Registration Plan">
            <MudPaper Class="pa-8 ma-2" >
                <!-- Master Plan Form -->
                <MudForm @ref="form1">
                    <!-- Form Fields -->
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField Variant="Variant.Outlined" Label="Master Plan Name" @bind-Value="Model.MasterPlanName" Required="true" For="@(() => Model.MasterPlanName)"/>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <SystemCodeAutocomplete Variant="Variant.Outlined" Label="Currency Type"
                                                    For="@(() => Model.CurrencyId)"
                                                    @bind-Value="Model.CurrencyId"
                                                    ParentCode="Currency">
                            </SystemCodeAutocomplete>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField Variant="Variant.Outlined" T="decimal?"
                                          Label="Amount"
                                          @bind-Value="currencyAmount"
                                          Immediate="true"
                                          For="@(() => Model.CurrencyAmount)"
                                          Format="N2" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField Variant="Variant.Outlined" T="decimal?"
                                          Label="Exchange Rate"
                                          @bind-Value="exchangeRate"
                                          Immediate="true"
                                          For="@(() => Model.ExchangeRate)"
                                          Format="N2" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField Variant="Variant.Outlined" T="decimal?"
                                          Label="Approved Budget (LSL)"
                                          @bind-Value="Model.ApprovedBudgetAmount"
                                          Required="true"
                                          Immediate="true"
                                          For="@(() => Model.ApprovedBudgetAmount)"
                                          Adornment="Adornment.End"
                                          AdornmentText="LSL"
                                          Format="N2" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField Format="N2" Variant="Variant.Outlined" T="int?" Required="true" Label="Estimated HHs Expected to be Targeted" @bind-Value="Model.EstimatedHHs" For="@(() => Model.EstimatedHHs)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudNumericField Variant="Variant.Outlined" T="decimal?" Required="true"
                                          Label="Categorization Discrepancy (%)"
                                          @bind-Value="Model.CategorizationDiscrepancy"
                                          For="@(() => Model.CategorizationDiscrepancy)"
                                          Max="99" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <SystemCodeAutocomplete Variant="Variant.Outlined" Label="Data Collection Approach" Required="true"
                                For="@(() => Model.DataCollectionTypeId)"
                                @bind-Value="Model.DataCollectionTypeId"
                                ParentCode="DataCollectionApproach">
                            </SystemCodeAutocomplete>
                        </MudItem>

                        <MudItem xs="12" sm="6" md="3">
                            <MudDatePicker Variant="Variant.Outlined" Required="true" Label="Projected Start Date" @bind-Date="Model.ProjectedStartDate" Color="Color.Success" For="@(() => Model.ProjectedStartDate)" MinDate="DateTime.Today" />
                        </MudItem>

                        <MudItem xs="12" sm="6" md="3">
                            <MudDatePicker Variant="Variant.Outlined" Label="Projected End Date" @bind-Date="Model.ProjectedEndDate" Color="Color.Success" For="@(() => Model.ProjectedEndDate)" Required="true"
                                           MinDate="Model.ProjectedStartDate != null ? Model.ProjectedStartDate.Value.AddDays(1) : DateTime.Today" />
                        </MudItem>

                        <MudItem xs="12" sm="6" md="3">
                            <SystemCodeAutocomplete Variant="Variant.Outlined" Label="Plan Type" Required="true"
                            For="@(() => Model.PlanTypeId)"
                            @bind-Value="Model.PlanTypeId"
                            ParentCode="PlanType">
                            </SystemCodeAutocomplete>
                        </MudItem>

                        <MudItem xs="12" sm="6" md="3">
                            <PMTFormulasAutocomplete Label="PMT Formula" Variant="Variant.Outlined"
                                                     For="@(() => Model.PMTFormulaId)" Required="true"
                                @bind-Value="Model.PMTFormulaId">
                            </PMTFormulasAutocomplete>
                        </MudItem>

                        <MudItem xs="12" sm="6" md="3">
                            <MudDatePicker Variant="Variant.Outlined"  @bind-Date="Model.FinancialYears"
                                           Label="Financial Year"
                                           DateFormat="yyyy"
                                           Required="true"
                                           OpenTo="OpenTo.Year"
                                           Views="CalendarViews.Year"
                                           Color="Color.Success"
                                           For="@(() => Model.FinancialYears)" />
                            @if(Model.FinancialYears.HasValue)
                            {
                                <MudText Typo="Typo.subtitle2" Class="mt-1">FY: @Model.FinancialYears.Value.Year - @(Model.FinancialYears.Value.Year + 1)</MudText>
                            }
                            else
                            {
                            }
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField Variant="Variant.Outlined" Label="Description" @bind-Value="Model.Description" FullWidth="true" For="@(() => Model.Description)" />
                        </MudItem>
                        <!-- Submit Button -->
                        <MudItem xs="12" class="d-flex justify-space-between">
                            
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="NextStepFromTab0">
                                Save
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="District Population Data" Disabled="@(_firstEnd)">
            <MudPaper Class="pa-8 ma-2">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Class="pull-right top-add-button mb-2 mt-2" Variant="Variant.Filled"
                           OnClick="AddNewDistrictData" DropShadow="true" Color="Color.Primary">Add District Population Data</MudButton>
                    <!-- District Table -->
                    <MudDataGrid T="RegistrationDistrictView" Items="registerDistrict" Bordered="true" Dense="true">
                        <Columns>
                            <PropertyColumn Property="x => x.MasterPlanName" Title="Master Registration Plan Name" />
                            <PropertyColumn Property="x => x.DistrictName" Title="District Name" />
                            <PropertyColumn Property="x => x.CurrentPopulation" CellStyle="text-align: right;" Title="Current Population" Format="N0" />
                            <PropertyColumn Property="x => x.EstimatedPopulation" CellStyle="text-align: right;" Title="Estimated Population" Format="N0" />
                            <PropertyColumn Property="x => x.PriorCoverage" Title="Prior Coverage (%)" />
                            <PropertyColumn Property="x => x.CurrentCoverage" Title="Current Coverage (%)" />
                            <PropertyColumn Property="x => x.TotalHHsToTarget" CellStyle="text-align: right;" Title="Total HHs To Target" Format="N0" />
                            <PropertyColumn Property="x => x.TotalPopulationToTarget" CellStyle="text-align: right;" Title="Total Population To Target" Format="N0" />
                            <TemplateColumn Title="Actions">
                                <CellTemplate>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Dense="true">
                                        <MudMenuItem OnClick="@(() => EditDistrict(context.Item))">
                                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" /> Edit
                                        </MudMenuItem>                                       
                                        <MudMenuItem OnClick="@(() => AddCouncil(context.Item))">
                                            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" /> Add Council Data
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ViewCouncil(context.Item.Id))">
                                            <MudIcon Icon="@Icons.Material.Filled.ViewList" Class="me-2" /> View Council Data
                                        </MudMenuItem>
                                    </MudMenu>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>

                        <PagerContent>
                            <MudDataGridPager T="RegistrationDistrictView" />
                        </PagerContent>
                    </MudDataGrid>


                <MudItem xs="12" class="d-flex justify-space-between mt-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="BackTab">
                        Back
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary">
                        Save
                    </MudButton>
                </MudItem>

            </MudPaper>
        </MudTabPanel>
        
        <MudTabPanel Text="Council Population Data" Disabled="@(_activeTab < 2)">
            <MudPaper Class="pa-8 ma-2">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Class="pull-right top-add-button mb-2 mt-2" Variant="Variant.Filled"
                           OnClick="AddNewCouncilData" DropShadow="true" Color="Color.Primary">Add Council Population Data</MudButton>

                <MudDataGrid T="RegistrationDistrictCCView" Items="registerDistrictCC" Bordered="true" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.CommunityCouncilName" Title="Community Council Name" />
                        <PropertyColumn Property="x => x.ProjectedHHs" Title="Projected Household" Format="N0" CellStyle="text-align: right;" />
                        <TemplateColumn Title="Edit">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    <MudIconButton Class="table-action-item" Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" OnClick="@(() => EditCouncil(context.Item))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="RegistrationDistrictCCView" />
                    </PagerContent>
                </MudDataGrid>
                <MudItem xs="12" class="d-flex justify-space-between mt-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="BackTab">
                        Back
                    </MudButton>
                </MudItem>
            </MudPaper>
        </MudTabPanel>

    </MudTabs>
</MudPaper>

@code {
    [Parameter] public int? Id { get; set; }
    private MasterRegistrationViewModel Model = new();
    private int statusId;
    private List<RegistrationDistrictView> registerDistrict = new();
    private List<RegistrationDistrictCCView> registerDistrictCC = new();
    private MudForm form1;
    private int _activeTab = 0;
    private bool _firstEnd = true;
    public DateTime FinancialYear { get; set; } = new DateTime(DateTime.Now.Year, 1, 1);
    private int MaxTotalHHs;
    public string FinancialYearLabel => $"{FinancialYear.Year} - {FinancialYear.AddYears(1).Year}";
    private int ComparingTotalHHToTarget;
    private string HeaderText = "Master Registration Plan";
    private List<BreadcrumbItem> _breadcrumbItems;
    private RegistrationDistrictView registerDistrictData;

    private decimal? currencyAmount
    {
        get => Model.CurrencyAmount;
        set
        {
            Model.CurrencyAmount = value;
            RecalculateApprovedBudget();
        }
    }

    private decimal? exchangeRate
    {
        get => Model.ExchangeRate;
        set
        {
            Model.ExchangeRate = value;
            RecalculateApprovedBudget();
        }
    }

    private void RecalculateApprovedBudget()
    {
        if (Model.CurrencyAmount.HasValue && Model.ExchangeRate.HasValue)
        {
            Model.ApprovedBudgetAmount = Math.Round(Model.CurrencyAmount.Value * Model.ExchangeRate.Value, 2);
        }
        else
        {
            Model.ApprovedBudgetAmount = null;
        }
    }

    private void Back()
    {
        Navigation.NavigateTo("/master/registration");
    }

    private void BackTab()
    {
        _activeTab--;
    }

    private async Task MasterPlanStep()
    {
        await form1.Validate();

        if (form1.IsValid)
        {
            try
            {
                LoadingService.Show();

                if (Model.Id > 0 && Model.StatusId == statusId)
                {
                    _firstEnd = false;
                    Model.StatusId = statusId;
                    Model.FinancialYear = Model.FinancialYears.HasValue ? $"{Model.FinancialYears.Value.Year}-{Model.FinancialYears.Value.Year + 1}" : Model.FinancialYear;
                    var data = _mapper.Map<MasterRegistration>(Model);
                    await _genericService.Update(data, false);
                    // Detach after adding
                    _context.Entry(data).State = EntityState.Detached;
                    MaxTotalHHs = Model.EstimatedHHs.Value;
                    LoadingService.Hide();
                    Snackbar.Add("Master registration updated successfully", Severity.Success);
                    _activeTab = 1;
                }
                else
                {
                    _firstEnd = false;
                    Model.StatusId = statusId;
                    Model.FinancialYear = $"{Model.FinancialYears.Value.Year}-{Model.FinancialYears.Value.Year + 1}";
                    var data = _mapper.Map<MasterRegistration>(Model);
                    var saveToDB =await _genericService.Add<MasterRegistration>(data, false);
                    Model.Id = data.Id;
                    // Detach after adding
                    _context.Entry(data).State = EntityState.Detached;
                    LoadingService.Hide();
                    Snackbar.Add("Master registration saved successfully", Severity.Success);
                    _activeTab = 1;
                }

            }
            catch (Exception ex)
            {
                LoadingService.Hide();
                Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
                return;
            }
            finally
            {
                LoadingService.Hide();
            }
            // Save step 1 to database or temporary storage
            Console.WriteLine($"Saving Master Plan: {Model.MasterPlanName}");

            // You can now move to step 2, e.g., _activeStep++
        }
        else
        {
            Snackbar.Add("Please complete all required fields.", Severity.Error);
        }
    }

    private async Task ComfirmStep()
    {
        try
        {
            LoadingService.Show();

            if (Model.Id > 0 && Model.StatusId == statusId)
            {
                Model.StatusId = await _context.SystemCodeDetailsView.AsNoTracking().Where(x => x.Code == "Under Review" && x.ParentCode == "Status").Select(x => x.Id).FirstOrDefaultAsync();
                var data = _mapper.Map<MasterRegistration>(Model);
                await _genericService.Update(data);
                LoadingService.Hide();
                Snackbar.Add($"{Model.MasterPlanName} plan submitted successfully", Severity.Success);

                Model = new MasterRegistrationViewModel(); // Reset model after submission
                Navigation.NavigateTo("/master/registration");
            }
        }
        catch (Exception ex)
        {
            LoadingService.Hide();
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task Init()
    {
        try
        {
            statusId = await _context.SystemCodeDetailsView.AsNoTracking().Where(x => x.Code == "Open" && x.ParentCode == "Status").Select(x => x.Id).FirstOrDefaultAsync();       
            if (Id.HasValue && Id.Value > 0)
            {
                HeaderText = "Edit Master Registration Plan";

                _firstEnd = false;
                var existing = await _context.MasterRegistrations.AsNoTracking().Where(x => x.Id == Id).FirstOrDefaultAsync();

                if (existing is not null)
                {
                    Model = _mapper.Map<MasterRegistrationViewModel>(existing);
                    Model.FinancialYears = new DateTime(int.Parse(existing.FinancialYear.Split('-')[0]), 1, 1);
                    registerDistrict = await _context.RegistrationDistrictView.AsNoTracking().Where(p => p.MasterRegistrationPlanId == Id).ToListAsync();
                }
            }
            else
            {
                HeaderText = "Add Master Registration Plan";

            }

            _breadcrumbItems =new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
                new("Registration Planning", href: null, icon: Icons.Material.Filled.NextPlan),
                new BreadcrumbItem("Master Registration Plans", href: "/master/registration", icon: Icons.Material.Filled.ManageAccounts),
                new BreadcrumbItem(HeaderText, href: null, disabled: true)
            };            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
    }

    private async Task NextStepFromTab0()
    {
        await form1.Validate();
        if (form1.IsValid)
        {

            await MasterPlanStep();

        }
        else
        {
            Snackbar.Add("Please fix errors before proceeding.", Severity.Error);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await Init();
    }

    private async Task AddNewDistrictData()
    {
        try
        {            
            var model = new RegistrationDistrictViewModel();
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
            var parameters = new DialogParameters
            {
                { "Model", model },
                { "MasterRegistrationPlanId", Model.Id},
                {"EstimatedHHs",Model.EstimatedHHs}
            };
            var dialogRef = await DialogService.ShowAsync<CreateEditDistrictPopulation>("Add District Population Data", parameters, options);
            var state = await dialogRef.Result;
            if (state is not null && !state.Canceled)
            {
                registerDistrict = await _context.RegistrationDistrictView.AsNoTracking().Where(p => p.MasterRegistrationPlanId == Model.Id).ToListAsync();
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }

    }

    private async Task EditDistrict(RegistrationDistrictView data)
    {
        try
        {            
            var model = _mapper.Map<RegistrationDistrictViewModel>(data);
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
            var parameters = new DialogParameters
            {
                { "Model", model },
                { "MasterRegistrationPlanId", Model.Id},
                {"EstimatedHHs",Model.EstimatedHHs}
            };
            var dialogRef = await DialogService.ShowAsync<CreateEditDistrictPopulation>("Edit District Population Data", parameters, options);
            var state = await dialogRef.Result;
            if (state is not null && !state.Canceled)
            {
                registerDistrict = await _context.RegistrationDistrictView.AsNoTracking().Where(p => p.MasterRegistrationPlanId == Model.Id).ToListAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
    }

    private async Task AddCouncil(RegistrationDistrictView data)
    {

        try
        {
            registerDistrictData = data;
            var model = new RegistrationDistrictCCViewModel();
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
            var parameters = new DialogParameters
            {
                { "Model", model },
                { "RegistrationDistrictId", data.Id},
                { "TotalHHsToTarget", data.TotalHHsToTarget},
                { "DistrictId", data.DistrictId}
            };
            var dialogRef = await DialogService.ShowAsync<CreateEditCouncilPopulation>("Add Council Population Data", parameters, options);
            var state = await dialogRef.Result;
            if (state is not null && !state.Canceled)
            {
                registerDistrictCC = await _context.RegistrationDistrictCCView.AsNoTracking().Where(p => p.RegistrationDistrictId == registerDistrictData.Id).ToListAsync();
                StateHasChanged();
                _activeTab = 2;
            }            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
    }

    private async Task EditCouncil(RegistrationDistrictCCView model)
    {
        try
        {
            var data = _mapper.Map<RegistrationDistrictCCViewModel>(model);
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
            var parameters = new DialogParameters
            {
                { "Model", data },
                { "RegistrationDistrictId", model.RegistrationDistrictId},
                { "TotalHHsToTarget", model.TotalHHsToTarget},
                { "DistrictId", model.DistrictId}
            };
            var dialogRef = await DialogService.ShowAsync<CreateEditCouncilPopulation>("Edit Council Population Data", parameters, options);
            var state = await dialogRef.Result;
            if (state is not null && !state.Canceled)
            {
                registerDistrictCC = await _context.RegistrationDistrictCCView.AsNoTracking().Where(p => p.RegistrationDistrictId == model.RegistrationDistrictId).ToListAsync();
                StateHasChanged();
                _activeTab = 2;
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
    }

    private async Task AddNewCouncilData()
    {
        var model = new RegistrationDistrictCCViewModel();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var parameters = new DialogParameters
        {
            { "Model", model },
            { "RegistrationDistrictId", registerDistrictData.Id},
            { "TotalHHsToTarget", registerDistrictData.TotalHHsToTarget},
            { "DistrictId", registerDistrictData.DistrictId}
        };
        var dialogRef = await DialogService.ShowAsync<CreateEditCouncilPopulation>("Add Council Population Data", parameters, options);
        var state = await dialogRef.Result;
        if (state is not null && !state.Canceled)
        {
            registerDistrictCC = await _context.RegistrationDistrictCCView.AsNoTracking().Where(p => p.RegistrationDistrictId == registerDistrictData.Id).ToListAsync();
            _activeTab = 2;
            StateHasChanged();
        }
    }

    private async Task ViewCouncil(int id)
    {
        var data = await _context.RegistrationDistrictView.AsNoTracking().Where(p => p.Id == id).FirstOrDefaultAsync();
        registerDistrictCC = await _context.RegistrationDistrictCCView.AsNoTracking().Where(p => p.RegistrationDistrictId == data.Id).ToListAsync();
        _activeTab = 2;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserProfileService.UserProfile.Contains("MASTER REGISTRATION PLANS:MODIFY") ||
        !UserProfileService.UserProfile.Contains("MASTER REGISTRATION PLANS:CREATE"))
        {
            Navigation.NavigateTo("/AccessDenied");
        }
    }
}

