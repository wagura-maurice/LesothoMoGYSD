@page "/admin/constituency"
@using System.Linq.Expressions
@using MoGYSD.Business.Models.Nissa.Admin
@using MoGYSD.Business.Persistence
@using MoGYSD.Business.Views.Nissa.Admin
@using MoGYSD.ViewModels.Nissa.Administration
@using MoGYSD.Web.Components.Autocompletes


<PageTitle>Constituencys</PageTitle>
<MudGrid Class="mb-3" AlignItems="Center" Justify="Justify.SpaceBetween">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h2" Class="font-weight-bold"><b>Constituencies</b></MudText>
        <MudText>
            Enables the creation, updating, and referencing of constituencies to respective districts.
        </MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="d-flex justify-end">
        <MudBreadcrumbs Items="_breadcrumbItems" Class="custom-breadcrumb" />
    </MudItem>
</MudGrid>

<MudExpansionPanels Elevation="1" Class="mt-2 mb-2">
    <MudExpansionPanel Text="Expand to apply search filter">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Variant="Variant.Outlined" @bind-Value="_quickName"
                              Label="Search by Name" />

            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <DistrictAutocomplete Variant="Variant.Outlined" Label="Search by District Name" ResetValueOnEmptyText="true"
                                        @bind-Value="_selectedDistrict"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <ConstituencyAutocomplete Label="Search by Constituency Name" ResetValueOnEmptyText="true"
                                          @bind-Value="_selectedConstituency" Variant="Variant.Outlined"  />
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-content-between">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnClearClicked" Size="Size.Small">
                Clear
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Size="Size.Small">
                Search
            </MudButton>
        </div>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudPaper Class="pa-4">
    @if (UserProfileService.UserProfile.Contains("CONSTITUENCY:CREATE"))
    {
        <MudButton EndIcon="@Icons.Material.Filled.Add" Class="pull-right top-add-button mb-2 mt-2" Variant="Variant.Filled"
                   OnClick="AddNew" DropShadow="true" Color="Color.Primary">Add New</MudButton>        
    }

    <MudDataGrid T="ConstituencyView" Items="data" Bordered="true" Dense="true" RowsPerPage="20">
        <NoRecordsContent>
            <MudText Typo="Typo.subtitle1" Class="my-4 text-muted text-center">
                No Constituency found. Try adjusting your filters.
            </MudText>
        </NoRecordsContent>
        <ToolBarContent>
            <MudText><b>Total Constituency(ies): @data.Count()</b></MudText>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.DistrictName" Title="District Name" />
            <PropertyColumn Property="x => x.Name" Title="Constituency Name" />
            <PropertyColumn Property="x => x.Code" Title="Unique Code" />
            <TemplateColumn Title="Active" HeaderClass="fit">
                <CellTemplate>
                    <MudText Style="@($"{GetStatusStyle(context.Item.Status)} display:block; padding:4px; border-radius:6px; width:100%; text-align: center;")">
                        @(context.Item.Status ? "Yes" : "No")
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Edit">
                <CellTemplate>
                    @if (UserProfileService.UserProfile.Contains("CONSTITUENCY:MODIFY"))
                    {
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudIconButton Class="table-action-item" Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" OnClick="@(() => Edit(context.Item))" />

                        </MudStack>                        
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="ConstituencyView" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>


@code {
    private IEnumerable<ConstituencyView> data = new List<ConstituencyView>();
    private List<Constituency> _allConstituencys = new();
    private int? _selectedConstituency;
    private int? _selectedDistrict;
    private bool _isLoading = false;
    private string _quickName = string.Empty;

    private List<BreadcrumbItem> _breadcrumbItems =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Settings", href: null, icon: Icons.Material.Filled.Settings),
        new("Geographical Settings", href: null, icon: Icons.Material.Filled.AdminPanelSettings),
        new("Constituencies", href: null, disabled: true, icon: Icons.Material.Filled.Map)
    ];

    protected override async Task OnInitializedAsync()
    {
        if (!UserProfileService.UserProfile.Contains("CONSTITUENCY:VIEW"))
        {
            Navigation.NavigateTo("/AccessDenied");
        }
        await Init();
    }

    private async Task OnSearchClicked()
    {
        await Init(_selectedConstituency, _selectedDistrict, _quickName);
    }

    private async Task OnClearClicked()
    {
        _selectedDistrict = null;
        _selectedConstituency = null;
        _quickName = null;
        await Init();
    }   

    private async Task Init(int? id = null, int? districtId = null, string searchByName = null)
    {
        try
        {
            LoadingService.Show();

            var query = _context.ConstituencyView.AsNoTracking();

            if (!string.IsNullOrEmpty(searchByName))
            {
                query = query.Where(n => n.DistrictName.ToLower().Contains(searchByName.ToLower()) ||
                n.Name.ToLower().Contains(searchByName.ToLower()));
            }

            if (id != null)
            {
                query = query.Where(d => d.Id == id);
            }

            if (districtId != null)
            {
                query = query.Where(d => d.DistrictId == districtId);
            }

            data = await query.OrderBy(a => a.DistrictId).ThenBy(a => a.Id).ToListAsync();
            LoadingService.Hide();
        }
        catch (Exception ex)
        {
            LoadingService.Hide();
            Snackbar.Add($"An unexpected error occurred: {(ex.InnerException is null ? ex.Message : ex.InnerException.Message)}", Severity.Error, config => { config.RequireInteraction = true; });
            return;
        }
        finally
        {
            _isLoading = false;
        }
        // StateHasChanged();
    }

    private async Task AddNew()
    {
        var model = new ConstituencyViewModel{Status = true };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters
        {
            { "Model", model }
        };
        var dialogRef = await DialogService.ShowAsync<CreateEdit>("Add Constituency", parameters, options);
        var state = await dialogRef.Result;
        if (state is not null && !state.Canceled)
        {
            await Init();
        }

    }

    private async Task Edit(ConstituencyView modelConstituency)
    {
        var model = _mapper.Map<ConstituencyViewModel>(modelConstituency);
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters
        {
            { "Model", model }
        };
        var dialogRef = await DialogService.ShowAsync<CreateEdit>("Edit Constituency", parameters, options);
        var state = await dialogRef.Result;
        if (state is not null && !state.Canceled)
        {
            await Init();
        }
    }

    private string GetStatusStyle(bool isActive)
    {
        return isActive
            ? "background-color:#e6f4ea; color:#2e7d32; border: 1px solid #c8e6c9;"
            : "background-color:#fcebea; color:#c62828; border: 1px solid #f5c6cb;";
    }
}
