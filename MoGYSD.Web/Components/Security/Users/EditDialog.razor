@using Microsoft.AspNetCore.Identity
@using MoGYSD.Business.Models.Nissa.UserManagement
@using MoGYSD.Business.Persistence
@using MoGYSD.Business.Views.Nissa.Admin
@using MoGYSD.ViewModels.Nissa.Administration
@using MoGYSD.ViewModels.Nissa.Security.UserViewModels
@using MoGYSD.Web.Components.Autocompletes
@using MoGYSD.Business.Models.Nissa.Admin

@inject RoleManager<ApplicationRole> RoleManager
@inject UserManager<ApplicationUser> UserManager

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="@User" Valid="isValid">
            <MudPaper Class="pa-2">
                <MudText Typo="Typo.h4" Class="mb-4"><b>User Information</b></MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="User.FirstName" Label="First Name" Required="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="User.MiddleName" Label="Middle Name" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="User.Surname" Label="Surname" Required="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudAutocomplete  Variant="Variant.Outlined" T="CountryCodeViewModel"
                                         @bind-Value="SelectedCountry"
                                         Label="Country Code"
                                         CoerceText="false"
                                         ResetValueOnEmptyText="true"
                                         SearchFunc="@SearchCountries"
                                         ToStringFunc="@(c => c != null ? $"{c.Flag} {c.Name} ({c.PhoneCode})" : string.Empty)"
                                         Clearable="true">
                            <ItemTemplate>
                                <MudStack>
                                    <MudText>@context.Flag @context.Name</MudText>
                                    <MudText Typo="Typo.caption">@context.PhoneCode</MudText>
                                </MudStack>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="User.PhoneNumber" Label="Phone Number" Required="true" For="@(() => User.PhoneNumber)" MaxLength="15" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Phone" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                       <MudSelect  Variant="Variant.Outlined" T="int?" Label="Select ID Type" @bind-Value="User.IDTypeId" ToStringFunc="GetIDTypeName">
                            @foreach (var idType in IDTypes)
                            {
                               <MudSelectItem T="int?" Value="@idType.Id">@idType.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="User.IDNumber" Label="ID. Number" Required="true" For="@(() => User.IDNumber)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                       <MudSelect  Variant="Variant.Outlined" T="string" Label="Select Role" @bind-Value="User.RoleId" Required="true">
                            @foreach (var role in Roles)
                            {
                               <MudSelectItem T="string" Value="@role.Id">@role.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            @if ((string.IsNullOrEmpty(SelectedRoleAccessLevel) || !SelectedRoleAccessLevel?.Equals("National", StringComparison.OrdinalIgnoreCase) == true))
            {
                <MudPaper Class="pa-2 mt-4">
                    <MudText Typo="Typo.h4" Class="mb-4"><b>Data Access Level</b></MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                       <MudSelectExtended  Variant="Variant.Outlined" T="int"
                                            ItemCollection="Districts.Select(v => v.Id).ToList()"
                                            ToStringFunc="GetDistrictNameById"
                                            SearchBox="true"
                                            SelectAllPosition="SelectAllPosition.AfterSearchBox"
                                            MultiSelectionTextFunc="GetMultiSelectionDistrictText"
                                            MultiSelection="true"
                                            ValuePresenter="_valuePresenter"
                                            SelectedValues ="_selectedDistrictIds"
                                            SelectedValuesChanged="OnDistrictsChanged"
                                            Label="Select Districts"
                                            AdornmentIcon="@Icons.Material.Filled.Search"
                                            AnchorOrigin="Origin.BottomCenter"
                                            MaxHeight="300"
                                            ChipCloseable="false"
                                            ChipSize="Size.Small"
                                            ChipVariant="Variant.Filled"
                                            Clearable="true">

                            @foreach (var district in Districts)
                            {
                               <MudSelectItemExtended T="int" Value="@district.Id" Text="@district.Name" />
                            }
                        </MudSelectExtended>
                    </MudItem>                    
                    @* Show Community Council only if access level is CommunityCouncil or Village or below *@
                    @if ((string.IsNullOrEmpty(SelectedRoleAccessLevel) || SelectedRoleAccessLevel?.Equals("Community Council", StringComparison.OrdinalIgnoreCase) == true)
                    || (string.IsNullOrEmpty(SelectedRoleAccessLevel) || SelectedRoleAccessLevel?.Equals("Village", StringComparison.OrdinalIgnoreCase) == true))
                    {
                        <MudItem xs="12" sm="6">
                               <MudSelectExtended  Variant="Variant.Outlined" T="int"
                                                   ItemCollection="CommunityCouncils.Select(v => v.Id).ToList()"
                                                   ToStringFunc="GetCommunityCouncilNameById"
                                                   SearchBox="true"
                                                   SelectAllPosition="SelectAllPosition.AfterSearchBox"
                                                   MultiSelectionTextFunc="GetMultiSelectionCommunityCouncilText"
                                                   MultiSelection="true"
                                                   ValuePresenter="_valuePresenter"
                                                   SelectedValues="_selectedCommunityCouncilIds"
                                                   SelectedValuesChanged="OnCommunityCouncilsChanged"
                                                   Label="Select Community Councils"
                                                   AdornmentIcon="@Icons.Material.Filled.Search"
                                                   AnchorOrigin="Origin.BottomCenter"
                                                   MaxHeight="300"
                                                   ChipCloseable="false"
                                                   ChipSize="Size.Small"
                                                   ChipVariant="Variant.Filled"
                                                   Clearable="true">

                                    @foreach (var district in Districts)
                                    {
                                       <MudSelectItemExtended T="int" Value="@district.Id" Text="@district.Name" />
                                    }
                                </MudSelectExtended>
                        </MudItem>
                    }
                    @* Show Village only if access level is Village *@
                    @if (string.IsNullOrEmpty(SelectedRoleAccessLevel) || SelectedRoleAccessLevel?.Equals("Village", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        <MudItem xs="12" sm="6">
                           <MudSelectExtended  Variant="Variant.Outlined" T="int"
                                                ItemCollection="Villages.Select(v => v.Id).ToList()"
                                                ToStringFunc="GetVillageNameById"
                                                SearchBox="true"
                                                SelectAllPosition="SelectAllPosition.AfterSearchBox"
                                                MultiSelectionTextFunc="GetMultiSelectionText"
                                                MultiSelection="true"
                                                ValuePresenter="_valuePresenter"
                                                SelectedValues="_selectedVillageIds"
                                                SelectedValuesChanged="OnVillagesChanged"
                                                Label="Select Villages"
                                                AdornmentIcon="@Icons.Material.Filled.Search"
                                                AnchorOrigin="Origin.BottomCenter"
                                                MaxHeight="300"
                                                ChipCloseable="false"
                                                ChipSize="Size.Small"
                                                ChipVariant="Variant.Filled"
                                                Clearable="true">

                                @foreach (var village in Villages)
                                {
                                   <MudSelectItemExtended T="int" Value="@village.Id" Text="@village.Name" />
                                }
                            </MudSelectExtended>
                        </MudItem>
                       
                       <MudItem xs="12" sm="6">
                           <MudSelectExtended  Variant="Variant.Outlined" T="int"
                                                ItemCollection="RegistrationCentres.Select(v => v.Id.Value).ToList()"
                                                ToStringFunc="GetRegistrationCentreNameById"
                                                SearchBox="true"
                                                SelectAllPosition="SelectAllPosition.AfterSearchBox"
                                                MultiSelectionTextFunc="GetMultiSelectionRegistrationCentreText"
                                                MultiSelection="true"
                                                ValuePresenter="_valuePresenter"
                                                 @bind-SelectedValues="_selectedRegistrationCentreIds"
                                                Label="Select Registration Centre"
                                                AdornmentIcon="@Icons.Material.Filled.Search"
                                                AnchorOrigin="Origin.BottomCenter"
                                                MaxHeight="300"
                                                ChipCloseable="false"
                                                ChipSize="Size.Small"
                                                ChipVariant="Variant.Filled"
                                                Clearable="true">

                                @foreach (var centres in RegistrationCentres)
                                {
                                   <MudSelectItemExtended T="int" Value="@centres.RegistrationCentreId.Value" Text="@centres.RegistrationCentreName" />
                                }
                            </MudSelectExtended>
                        </MudItem>
                    }
                </MudGrid>
                </MudPaper>

            }
        </MudForm>
    </DialogContent>

    <DialogActions>
        @if (isBusy == false)
        {
                <div class="col-md-12 mb-3">
                    <div class="col-md-12 mb-3 d-flex justify-content-between">
                        <MudButton OnClick="Cancel"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   Size="Size.Small">Cancel</MudButton>

                        <MudButton OnClick="SaveUser" Color="Color.Primary" Variant="Variant.Filled"
                                   Size="Size.Small">Save</MudButton>

                    </div>
                </div>  
        }
        else
        {
            <div class="w-100 d-flex justify-content-center align-items-center" style="min-height: 40px;">
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            </div>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public RegisterUserViewModel User { get; set; }

    private MudForm? _form;
    private bool isValid;
    private List<ApplicationRole>? Roles = new();
    private string? SelectedRoleAccessLevel => Roles.FirstOrDefault(r => r.Id == User.RoleId)?.SystemCodeDetail?.Code;
    private List<SystemCodeDetailsView>? IDTypes = new();
    private List<CountryCodeViewModel> CountryCodes { get; set; } = new();
    private CountryCodeViewModel SelectedCountry { get; set; }
    private bool isBusy;

    private List<DistrictView> Districts = new();
    private IEnumerable<int> _selectedDistrictIds = new List<int>();
    private List<CommunityCouncilView> CommunityCouncils = new();
    private IEnumerable<int> _selectedCommunityCouncilIds = new List<int>();
    private List<VillageView> Villages = new();
    private IEnumerable<int> _selectedVillageIds = new List<int>();
    private List<RegistrationCentreVillageView> RegistrationCentres = new();
    private IEnumerable<int> _selectedRegistrationCentreIds = new List<int>();
    ValuePresenter _valuePresenter = ValuePresenter.Text;
    private string userRoleId = string.Empty;

    private async Task SaveUser()
    {
        if (_form is not null)
        {
             if (!string.IsNullOrEmpty(SelectedRoleAccessLevel) &&
            SelectedRoleAccessLevel.Equals("District", StringComparison.OrdinalIgnoreCase))
            {
                if(_selectedDistrictIds.Count() == 0)
                {
                    Snackbar.Add("Please select at least one district.", Severity.Warning);
                    return;
                }
            }
            else if (!string.IsNullOrEmpty(SelectedRoleAccessLevel) &&
                        SelectedRoleAccessLevel.Equals("Community Council", StringComparison.OrdinalIgnoreCase))
            {
                if (_selectedCommunityCouncilIds.Count() == 0)
                {
                    Snackbar.Add("Please select at least one community council.", Severity.Warning);
                    return;
                }
            }
            else if (!string.IsNullOrEmpty(SelectedRoleAccessLevel) &&
                        SelectedRoleAccessLevel.Equals("Village", StringComparison.OrdinalIgnoreCase))
            {
                if (_selectedVillageIds.Count() == 0)
                {
                    Snackbar.Add("Please select at least one village.", Severity.Warning);
                    return;
                }

                if(_selectedRegistrationCentreIds.Count() == 0)
                {
                    Snackbar.Add("Please select at least one registration centre.", Severity.Warning);
                    return;
                }
            }
            await _form.Validate();

            if (_form.IsValid)
            {
                isBusy = true;
                // Save logic here
                try
                {
                    // Retrieve the existing user by Id from the database
                    User.CountryCode = SelectedCountry?.PhoneCode ?? "+266"; 
                    User.ModifiedOn = DateTime.Now;
                    User.ModifiedById = UserProfileService.UserId;
                    var existingUser = await UserManager.FindByIdAsync(User.Id);
                    if (existingUser == null)
                    {
                        isBusy = false;
                        Snackbar.Add($"User not found", Severity.Error);
                    }

                    var roleName = await RoleManager.FindByIdAsync(existingUser.RoleId);

                    if (roleName == null)
                    {
                        isBusy = false;
                        Snackbar.Add("Invalid role selected.", Severity.Error);
                    }

                    existingUser.FirstName = User.FirstName;
                    existingUser.MiddleName = User.MiddleName;
                    existingUser.Surname = User.Surname;
                    existingUser.PhoneNumber = User.PhoneNumber;
                    existingUser.RoleId = User.RoleId;
                    existingUser.IDNumber = User.IDNumber;
                    existingUser.IDTypeId = User.IDTypeId;
                    existingUser.CountryCode = User.CountryCode;

                    // Save changes
                    var update = await UserManager.UpdateAsync(existingUser);

                    if(existingUser.RoleId != userRoleId)
                    {
                        // Remove the user from the old role
                        var oldRole = await RoleManager.FindByIdAsync(userRoleId);
                        if (oldRole != null)
                        {
                            await UserManager.RemoveFromRoleAsync(existingUser, oldRole.Name);
                        }

                        await UserManager.AddToRoleAsync(existingUser, roleName.Name);
                    }

                    if (update.Succeeded)
                    {
                        await InvokeAsync(async () =>
                        {
                            if(_selectedDistrictIds.Count() > 0)
                            {
                                // Register user to Districts if selected
                                foreach (var districtId in _selectedDistrictIds)
                                {
                                    // Load all existing district assignments for the user
                                    var existingDistricts = await _context.UserDistrictAssignments
                                        .Where(uda => uda.ApplicationUserId == existingUser.Id)
                                        .ToListAsync();

                                    // Step 1: Delete assignments that are in DB but NOT in selected list
                                    var districtsToRemove = existingDistricts
                                        .Where(uda => !_selectedDistrictIds.Contains(uda.DistrictId))
                                        .ToList();

                                    _genericService.RemoveRange(districtsToRemove);
                                    // Step 2: Add new assignments that are selected but NOT in the DB
                                    var existingDistrictIds = existingDistricts.Select(uda => uda.DistrictId).ToHashSet();

                                    var newDistrictsToAdd = _selectedDistrictIds
                                        .Where(districtId => !existingDistrictIds.Contains(districtId))
                                        .Select(districtId => new UserDistrictAssignment
                                        {
                                            ApplicationUserId = existingUser.Id,
                                            DistrictId = districtId
                                        })
                                        .ToList();

                                    _genericService.AddRange(newDistrictsToAdd);
                                }
                            }

                            if(_selectedCommunityCouncilIds.Count() > 0)
                            {
                                // Register user to Community Councils if selected
                                foreach (var communityCouncilId in _selectedCommunityCouncilIds)
                                {
                                    var existingCommunityCouncils = await _context.UserCommunityCouncilAssignments
                                        .Where(uca => uca.ApplicationUserId == existingUser.Id)
                                        .ToListAsync();
                                    var communityCouncilsToRemove = existingCommunityCouncils
                                        .Where(uca => !_selectedCommunityCouncilIds.Contains(uca.CommunityCouncilId))
                                        .ToList();
                                    _genericService.RemoveRange(communityCouncilsToRemove);
                                    var existingCommunityCouncilIds = existingCommunityCouncils.Select(uca => uca.CommunityCouncilId).ToHashSet();
                                    var newCommunityCouncilsToAdd = _selectedCommunityCouncilIds
                                        .Where(communityCouncilId => !existingCommunityCouncilIds.Contains(communityCouncilId))
                                        .Select(communityCouncilId => new UserCommunityCouncilAssignment
                                        {
                                            ApplicationUserId = existingUser.Id,
                                            CommunityCouncilId = communityCouncilId
                                        })
                                        .ToList();
                                    _genericService.AddRange(newCommunityCouncilsToAdd);
                                }
                            }

                            if(_selectedVillageIds.Count() > 0)
                            {
                                // Register user to Villages if selected
                                foreach (var villageId in _selectedVillageIds)
                                {
                                    var existingVillages = await _context.UserVillageAssignments
                                        .Where(uva => uva.ApplicationUserId == existingUser.Id)
                                        .ToListAsync();
                                    var villagesToRemove = existingVillages.Where(uva => !_selectedVillageIds.Contains(uva.VillageId)).ToList();
                                    _genericService.RemoveRange(villagesToRemove);
                                    var existingVillageIds = existingVillages.Select(uva => uva.VillageId).ToHashSet();
                                    var newVillagesToAdd = _selectedVillageIds
                                        .Where(villageId => !existingVillageIds.Contains(villageId))
                                        .Select(villageId => new UserVillageAssignment
                                        {
                                            ApplicationUserId = existingUser.Id,
                                            VillageId = villageId
                                        })
                                        .ToList();
                                    _genericService.AddRange(newVillagesToAdd);
                                }
                            }

                            if(_selectedRegistrationCentreIds.Count() > 0)
                            {
                                // Register user to Registration Centres if selected
                                foreach (var registrationCentreId in _selectedRegistrationCentreIds)
                                {
                                    var existingRegistrationCentres = await _context.UserRegistrationCentreAssignments
                                        .Where(ura => ura.ApplicationUserId == existingUser.Id)
                                        .ToListAsync();

                                    var registrationCentresToRemove = existingRegistrationCentres
                                        .Where(ura => !_selectedRegistrationCentreIds.Contains(ura.RegistrationCentreId))
                                        .ToList();

                                    _genericService.RemoveRange(registrationCentresToRemove);

                                    var existingRegistrationCentreIds = existingRegistrationCentres
                                    .Select(ura => ura.RegistrationCentreId).ToHashSet();

                                    var newRegistrationCentresToAdd = _selectedRegistrationCentreIds
                                        .Where(registrationCentreId => !existingRegistrationCentreIds.Contains(registrationCentreId))
                                        .Select(registrationCentreId => new UserRegistrationCentreAssignment
                                        {
                                            ApplicationUserId = existingUser.Id,
                                            RegistrationCentreId = registrationCentreId
                                        })
                                        .ToList();

                                    _genericService.AddRange(newRegistrationCentresToAdd);

                                    if (roleName.Name.Contains("Enumerator", StringComparison.OrdinalIgnoreCase))
                                    {
                                        // Check if the user is already an enumerator
                                        var existingEnumerator = await _context.Enumerators
                                            .Where(e => e.UserId == existingUser.Id && e.RegistrationCentreId == registrationCentreId)
                                            .FirstOrDefaultAsync();
                                        if (existingEnumerator != null)
                                        {
                                            existingEnumerator.IsSupervisor = roleName.Name.Contains("Supervisor", StringComparison.OrdinalIgnoreCase);
                                            existingEnumerator.ModifiedById = UserProfileService.UserId;
                                            existingEnumerator.ModifiedOn = DateTime.Now;
                                            // Update the enumerator in the database
                                            await _genericService.Update(existingEnumerator);
                                        }
                                        // If not, create a new enumerator record
                                        else
                                        {
                                            // Create a new enumerator record
                                            var enumerator = new Enumerator
                                            {
                                                UserId = User.Id,
                                                RegistrationCentreId = registrationCentreId,
                                                CreatedOn = DateTime.Now,
                                                CreatedById = UserProfileService.UserId,
                                                IsSupervisor = roleName.Name.Contains("Supervisor", StringComparison.OrdinalIgnoreCase)
                                            };
                                            await _genericService.Add(enumerator);
                                        }

                                    }

                                    if (roleName.Name.Contains("Supervisor", StringComparison.OrdinalIgnoreCase))
                                    {
                                        // Check if the user is already a supervisor
                                        var existingSupervisor = await _context.RegistrationCentres
                                            .Where(e => e.Id == registrationCentreId)
                                            .FirstOrDefaultAsync();
                                            if (existingSupervisor != null)
                                            {
                                                existingSupervisor.SupervisorId = User.Id;
                                                existingSupervisor.ModifiedById = UserProfileService.UserId;
                                                existingSupervisor.ModifiedOn = DateTime.Now;
                                                // Update the supervisor in the database
                                                await _genericService.Update(existingSupervisor);
                                            }

                                    }
                                }
                            }
                            isBusy = false;
                            Snackbar.Add("User updated successfully", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        });                        
                    }
                   
                }
                catch (Exception ex)
                {
                    LoadingService.Hide();
                    Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
                    return;
                }
            }
            else
            {
                Snackbar.Add("Please fill in all required fields.", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        using var context = _dbContextFactory.CreateDbContext();

        Roles = await context.Roles.Include(d => d.SystemCodeDetail).OrderBy(r => r.Name).ToListAsync();
        IDTypes = await context.SystemCodeDetailsView.Where(d => d.ParentCode == "IDType").ToListAsync();
        CountryCodes = CountryCodeDataService.GetCountries();
        SelectedCountry = string.IsNullOrEmpty(User.CountryCode) ? CountryCodes.FirstOrDefault(c => c.PhoneCode == "+266") :
        CountryCodes.FirstOrDefault(c => c.PhoneCode == User.CountryCode);
        userRoleId = User.RoleId;

        Districts = await context.DistrictView.ToListAsync();
        var districtId = await context.UserDistrictAssignments.Where(a => a.ApplicationUserId == User.Id).Select(d => d.DistrictId).ToListAsync();
        if (districtId.Any())
        {
            _selectedDistrictIds = Districts.Where(d => districtId.Contains(d.Id)).Select(d => d.Id);
            CommunityCouncils = await context.CommunityCouncilView.Where(d => _selectedDistrictIds.Contains(d.DistrictId)).ToListAsync();
        }

        var communityCouncilId = await context.UserCommunityCouncilAssignments.Where(a => a.ApplicationUserId == User.Id).Select(c => c.CommunityCouncilId).ToListAsync();
        if (communityCouncilId.Any())
        {
            _selectedCommunityCouncilIds = CommunityCouncils.Where(c => communityCouncilId.Contains(c.Id)).Select(c => c.Id);
            Villages = await context.VillageView.Where(v => _selectedCommunityCouncilIds.Contains(v.CommunityCouncilId)).ToListAsync();
        }

        var villageId = await context.UserVillageAssignments.Where(a => a.ApplicationUserId == User.Id).Select(v => v.VillageId).ToListAsync();
        if (villageId.Any())
        {
            _selectedVillageIds = Villages.Where(v => villageId.Contains(v.Id)).Select(v => v.Id);
            RegistrationCentres = await context.RegistrationCentreVillageView
                            .Where(r => _selectedVillageIds.Contains(r.VillageId))
                            .GroupBy(c => c.RegistrationCentreId)
                            .Select(g => g.First()) // or another representative item
                            .ToListAsync();
        }

        var registrationCentreId = await context.UserRegistrationCentreAssignments.Where(a => a.ApplicationUserId == User.Id).Select(r => r.RegistrationCentreId).ToListAsync();
        if (registrationCentreId.Any())
        {
            _selectedRegistrationCentreIds = RegistrationCentres.Where(r => registrationCentreId.Contains(r.RegistrationCentreId.Value)).Select(r => r.RegistrationCentreId.Value);
        }

    }

    private async Task<IEnumerable<CountryCodeViewModel>> SearchCountries(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return CountryCodes.Take(20);

        // Split search term to handle "Lesotho +266" style queries
        var terms = value.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        return CountryCodes.Where(x =>
            terms.All(term =>
                x.Name.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                x.PhoneCode.Contains(term) ||
                x.Code.Contains(term, StringComparison.OrdinalIgnoreCase)))
            .OrderBy(x => x.Name)
            .Take(20);
    }

    private string GetIDTypeName(int? id)
    {
        return IDTypes.FirstOrDefault(x => x.Id == id)?.Name ?? "-- Select ID Type --";
    }

    private string GetMultiSelectionText(IEnumerable<int> selectedIds)
    {
        var names = Villages
            .Where(v => selectedIds.Contains(v.Id))
            .Select(v => v.Name);

        return string.Join(", ", names);
    }

    private string GetVillageNameById(int id)
    {
        return Villages.FirstOrDefault(v => v.Id == id)?.Name ?? $"Village {id}";
    }

    private async Task OnVillagesChanged(IEnumerable<int> selectedValues)
    {
        using var context = _dbContextFactory.CreateDbContext();
        _selectedVillageIds = selectedValues;

        RegistrationCentres.Clear();
        _selectedRegistrationCentreIds = new List<int>();

        if (_selectedVillageIds.Any())
        {
            // Load Community Councils based on selected Districts
            RegistrationCentres = await context.RegistrationCentreVillageView
                .Where(c => _selectedVillageIds.Contains(c.VillageId) && c.RegistrationCentreIsActive == true)
                .GroupBy(c => c.RegistrationCentreId)
                .Select(g => g.First()) // or another representative item
                .ToListAsync();

        }
        else
        {
            Villages.Clear();
        }
        StateHasChanged();
    }

    private string GetDistrictNameById(int id)
    {
        return Districts.FirstOrDefault(v => v.Id == id)?.Name ?? $"District {id}";
    }

    private string GetMultiSelectionDistrictText(IEnumerable<int> selectedIds)
    {
        var names = Districts
            .Where(v => selectedIds.Contains(v.Id))
            .Select(v => v.Name);

        return string.Join(", ", names);
    }

    private async Task OnDistrictsChanged(IEnumerable<int> selectedValues)
    {
        using var context = _dbContextFactory.CreateDbContext();
        _selectedDistrictIds = selectedValues;

        CommunityCouncils.Clear();
        _selectedCommunityCouncilIds = new List<int>();


        Villages.Clear();
        _selectedVillageIds = new List<int>();


        RegistrationCentres.Clear();
        _selectedRegistrationCentreIds = new List<int>();

        if (_selectedDistrictIds.Any())
        {
            // Load Community Councils based on selected Districts
            CommunityCouncils = await context.CommunityCouncilView
                .Where(c => _selectedDistrictIds.Contains(c.DistrictId))
                .OrderBy(c => c.DistrictId)
                .ThenBy(c => c.Id)
                .ToListAsync();
        }
        else
        {
            CommunityCouncils.Clear();
        }
        StateHasChanged();
    }

    private string GetCommunityCouncilNameById(int id)
    {
        return CommunityCouncils.FirstOrDefault(v => v.Id == id)?.CommunityCouncilName ?? $"Community Council {id}";
    }

    private string GetMultiSelectionCommunityCouncilText(IEnumerable<int> selectedIds)
    {
        var names = CommunityCouncils
            .Where(v => selectedIds.Contains(v.Id))
            .Select(v => v.CommunityCouncilName);

        return string.Join(", ", names);
    }

    private async Task OnCommunityCouncilsChanged(IEnumerable<int> selectedValues)
    {
        using var context = _dbContextFactory.CreateDbContext();
        _selectedCommunityCouncilIds = selectedValues;

        Villages.Clear();
        _selectedVillageIds = new List<int>();


        RegistrationCentres.Clear();
        _selectedRegistrationCentreIds = new List<int>();

        if (_selectedCommunityCouncilIds.Any())
        {
            // Load Community Councils based on selected Districts
            Villages = await context.VillageView
                .Where(c => _selectedCommunityCouncilIds.Contains(c.CommunityCouncilId))
                .OrderBy(c => c.DistrictId)
                .ThenBy(c => c.CommunityCouncilId)
                .ThenBy(c => c.Id)
                .ToListAsync();
        }
        else
        {
            Villages.Clear();
        }
        StateHasChanged();
    }

    private string GetMultiSelectionRegistrationCentreText(IEnumerable<int> selectedIds)
    {
        var names = RegistrationCentres
            .Where(v => v.RegistrationCentreId.HasValue && selectedIds.Contains(v.RegistrationCentreId.Value))
            .DistinctBy(v => v.RegistrationCentreId)
            .Select(v => v.RegistrationCentreName);
        return string.Join(", ", names);
    }

    private string GetRegistrationCentreNameById(int id)
    {
        return RegistrationCentres.DistinctBy(v => v.RegistrationCentreId).FirstOrDefault(v => v.RegistrationCentreId == id)?.RegistrationCentreName ?? $"Registration Centre {id}";
    }
}
