@using Microsoft.AspNetCore.Identity
@using MoGYSD.Business.Models.Nissa.UserManagement

@inject UserManager<ApplicationUser> UserManager

<MudDialog>
    <DialogContent>
        @if (Input == null)
        {
            <MudProgressCircular />
        }
        else
        {
            <MudForm @ref="form">
                <MudPaper Class="pa-2">
                    <MudTextField @bind-Value="Input.Email" Label="Email" For="@(() => Input.Email)"
                                  Variant="Variant.Outlined" ReadOnly="true" Disabled="true"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email"
                                  Class="mb-4" Immediate="true" />

                    <MudTextField @bind-Value="Input.Password" Label="Password" For="@(() => Input.Password)"
                                  InputType="InputType.Password" Variant="Variant.Outlined"
                                  Class="mb-4" Required="true" RequiredError="Password is required"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />

                    <MudTextField @bind-Value="Input.ConfirmPassword" Label="Confirm Password"
                                  For="@(() => Input.ConfirmPassword)"
                                  InputType="InputType.Password" Variant="Variant.Outlined"
                                  Class="mb-4" Required="true" RequiredError="Confirmation is required"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />
                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Reset</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public ResetPasswordInputModel Input { get; set; } = new(); // Initialize with empty object

    private MudForm form;

    protected override void OnInitialized()
    {
        if (Input == null)
        {
            Input = new ResetPasswordInputModel();
        }
    }

    private async Task Submit()
    {
        if (Input == null) return;

        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                var dialog = await DialogServiceHelper.ShowConfirmationDialogAsync(
                    DialogService,
                    $"Are you sure you want to reset password for {Input.Email}?"
                );

                if (dialog)
                {
                    var user = await UserManager.FindByEmailAsync(Input.Email);

                    if (user is null)
                    {
                        Snackbar.Add("User not found", Severity.Error);
                        return;
                    }

                    await UserManager.RemovePasswordAsync(user);
                    var result = await UserManager.AddPasswordAsync(user, Input.Password);

                    if (result.Succeeded)
                    {
                        user.IsChangePassword = true;
                        await UserManager.UpdateAsync(user);

                        Snackbar.Add("Password has been reset successfully.", Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        foreach (var error in result.Errors)
                        {
                            Snackbar.Add(error.Description, Severity.Error);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error resetting password: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}