@page "/Account/ForgotPassword"

@layout PublicLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MoGYSD.Business.Models.Nissa.UserManagement

@using MoGYSD.Business.Persistence
@using MoGYSD.ViewModels.Email
@using MoGYSD.Web.Components.Layout


@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager

<PageTitle>Forgot your password?</PageTitle>

<h2 class="form-title">Forgot Password?</h2>
<p>
    Enter your email below to receive a link for resetting your password
</p>
<br>
<EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="Input.Email" class="form-label">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            NavigationManager.NavigateTo("Account/ForgotPasswordConfirmation", forceLoad: true);
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code, ["email"] = user.Email });

        // await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        // Send Email
        var emailData = new EmailViewModel<ResetPasswordEmail>()
        {
            To = user.Email.Trim(),
            IsHtml = true,
            Subject = "Reset Password",
            Email = new ResetPasswordEmail
            {
                FirstName = user.FirstName,
                ResetPasswordLink = callbackUrl
            }
        };
        await EmailService.SendEmailAsync(emailData).ConfigureAwait(false);
        Navigation.NavigateTo("Account/ForgotPasswordConfirmation", forceLoad: true);
        
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
